function a(){return new Promise((e,t)=>{const r=self.indexedDB.open("kv-storage:default",1);r.onsuccess=()=>{const n=r.result;e(n)},r.onerror=()=>t(r.error)})}function c(e){return new Promise((t,r)=>{e.oncomplete=()=>{t()},e.onabort=()=>{r(e.error)},e.onerror=()=>{r(e.error)}})}function l(e,t){return new Promise((r,n)=>{e.onsuccess=()=>{let o=e.result;t&&(o=t(o)),r(o)},e.onerror=()=>{n(e.error)}})}function y(e,t){return l(e.openCursor(t),r=>r?[r.key,r.value]:[])}async function s(e,t,r){const n=e.transaction("store",t),o=n.objectStore("store");return r(n,o)}let i=null;export class JSONStore extends EventTarget{constructor(){return super(),i||(i=this),i}async set(e,t){const r=await a();await s(r,"readwrite",(n,o)=>(o.put(JSON.stringify(t),e),c(n))),this.dispatchEvent(new Event("change")),r.close()}async get(e){const t=await a(),r=await s(t,"readonly",(n,o)=>l(o.get(e)));return t.close(),r?JSON.parse(r):null}async has(e){return!!this.get(e)}async remove(e){const t=await a();await s(t,"readwrite",(r,n)=>(n.delete(e),c(r))),this.dispatchEvent(new Event("change")),t.close()}async*[Symbol.asyncIterator](){let e=-Infinity;const t=await a();do{let[r,n]=await s(t,"readonly",(d,u)=>y(u,IDBKeyRange.lowerBound(e,!0)));if(e=r,r===void 0)break;let o=JSON.parse(n);o.name=r,yield o}while(!0);t.close()}entries(){return this[Symbol.asyncIterator]()}}
